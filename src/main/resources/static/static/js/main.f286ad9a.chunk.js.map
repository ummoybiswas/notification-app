{"version":3,"sources":["components/Header.jsx","components/NotificationForm.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","Jumbotron","className","SMSForm","props","to","body","Form","Group","controlId","Label","Control","type","name","placeholder","value","onChange","EmailForm","title","FirebaseForm","Text","href","target","NotificationForm","channelForm","channels","triggerTypes","alert","useAlert","useState","triggerType","cronExpression","state","setState","handleChange","e","toLowerCase","onSubmit","event","preventDefault","fetch","method","headers","JSON","stringify","then","r","json","data","success","message","error","map","Check","inline","checked","label","style","textTransform","id","Button","variant","App","Container","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","options","timeout","position","positions","BOTTOM_CENTER","Home","template","AlertTemplate","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f286ad9a.chunk.js","sourcesContent":["import React from \"react\";\nimport {Jumbotron} from \"react-bootstrap\";\n\nconst Header = () => {\n    return (\n        <Jumbotron>\n            <h1 className='text-center'>Create Notification</h1>\n        </Jumbotron>\n    );\n};\n\nexport default Header;","import React, {Fragment, useState} from \"react\";\nimport {useAlert} from \"react-alert\";\nimport {Form, Button} from \"react-bootstrap\";\n\nconst SMSForm = (props) => {\n    const {to, body} = props;\n    return (\n        <Fragment>\n            <Form.Group controlId=\"formToField\">\n                <Form.Label>To</Form.Label>\n                <Form.Control type=\"text\" name=\"to\" placeholder=\"Mobile Number with Country Code\" value={to}\n                              onChange={props.onChange}/>\n            </Form.Group>\n\n            <Form.Group controlId=\"formBody\">\n                <Form.Label>Message</Form.Label>\n                <Form.Control type=\"text\" name=\"body\" placeholder=\"Message\" value={body} onChange={props.onChange}/>\n            </Form.Group>\n        </Fragment>\n    );\n}\n\nconst EmailForm = (props) => {\n    const {to, title, body} = props;\n    return (\n        <Fragment>\n            <Form.Group controlId=\"formToField\">\n                <Form.Label>To</Form.Label>\n                <Form.Control type=\"email\" name=\"to\" placeholder=\"Email Address\" value={to} onChange={props.onChange}/>\n            </Form.Group>\n\n            <Form.Group controlId=\"formTitle\">\n                <Form.Label>Subject</Form.Label>\n                <Form.Control type=\"text\" name=\"title\" placeholder=\"Subject\" value={title} onChange={props.onChange}/>\n            </Form.Group>\n\n            <Form.Group controlId=\"formBody\">\n                <Form.Label>Body</Form.Label>\n                <Form.Control type=\"text\" name=\"body\" placeholder=\"Body\" value={body} onChange={props.onChange}/>\n            </Form.Group>\n        </Fragment>\n    );\n}\n\nconst FirebaseForm = (props) => {\n    const {to, title, body} = props;\n    return (\n        <Fragment>\n            <Form.Group controlId=\"formToField\">\n                <Form.Label>To</Form.Label>\n                <Form.Control type=\"text\" name=\"to\" placeholder=\"Firebase Registration Token\" value={to}\n                              onChange={props.onChange}/>\n                <Form.Text className=\"text-muted\">\n                    <a href=\"/generate-firebase-token\" target=\"_blank\">Generate Firebase Registration Token</a>\n                </Form.Text>\n            </Form.Group>\n\n            <Form.Group controlId=\"formTitle\">\n                <Form.Label>Title</Form.Label>\n                <Form.Control type=\"text\" name=\"title\" placeholder=\"Title\" value={title} onChange={props.onChange}/>\n            </Form.Group>\n\n            <Form.Group controlId=\"formBody\">\n                <Form.Label>Body</Form.Label>\n                <Form.Control type=\"text\" name=\"body\" placeholder=\"Body\" value={body} onChange={props.onChange}/>\n            </Form.Group>\n        </Fragment>\n    );\n}\n\nconst NotificationForm = () => {\n    const channels = ['firebase', 'email', 'sms'];\n    const triggerTypes = ['SYNC', 'ASYNC', 'PERIODIC'];\n    const alert = useAlert();\n\n    const [state, setState] = useState({\n        type: channels[0],\n        triggerType: triggerTypes[0],\n        to: '',\n        title: '',\n        body: '',\n        cronExpression: '',\n    });\n\n    const handleChange = e => {\n        setState({\n            ...state,\n            [e.target.name]: e.target.value,\n        });\n    }\n\n    let channelForm;\n    if (state.type.toLowerCase() === 'sms') {\n        channelForm = <SMSForm to={state.to} body={state.body} onChange={handleChange}/>\n    } else if (state.type.toLowerCase() === 'firebase') {\n        channelForm = <FirebaseForm to={state.to} title={state.title} body={state.body} onChange={handleChange}/>\n    } else if (state.type.toLowerCase() === 'email') {\n        channelForm = <EmailForm to={state.to} title={state.title} body={state.body} onChange={handleChange}/>\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        fetch('http://localhost:8080/notify', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(state),\n        }).then(r => r.json())\n            .then(data => {\n                if (data.success) {\n                    alert.success(data.message);\n                    setState({\n                        ...state,\n                        to: '',\n                        title: '',\n                        body: '',\n                        cronExpression: ''\n                    })\n                } else {\n                    alert.error(data.message);\n                }\n            });\n    };\n    return (\n        <Fragment>\n            <Form onSubmit={handleSubmit}>\n                <Form.Group controlId=\"formChannelType\">\n                    <Form.Label>Channel:&nbsp;</Form.Label>\n                    {channels.map((type) => (\n                        <Form.Check\n                            key={type}\n                            inline\n                            name=\"type\"\n                            checked={state.type.toLowerCase() === type.toLowerCase()}\n                            label={type}\n                            onChange={handleChange}\n                            style={{textTransform: \"uppercase\"}}\n                            type=\"radio\"\n                            value={type}\n                            id={`${type}-1`}\n                        />\n                    ))}\n                </Form.Group>\n\n                <Form.Group controlId=\"formTriggerType\">\n                    <Form.Label>Trigger Type:&nbsp;</Form.Label>\n                    {triggerTypes.map((type) => (\n                        <Form.Check\n                            key={type}\n                            inline\n                            name=\"triggerType\"\n                            checked={state.triggerType.toLowerCase() === type.toLowerCase()}\n                            label={type}\n                            onChange={handleChange}\n                            type=\"radio\"\n                            value={type}\n                            id={`${type}-1`}\n                        />\n                    ))}\n                </Form.Group>\n\n                {channelForm}\n\n                {\n                    state.triggerType.toLowerCase() === 'periodic' &&\n                    <Form.Group controlId=\"formCronExpression\">\n                        <Form.Label>Cron Expression</Form.Label>\n                        <Form.Control type=\"text\" name=\"cronExpression\" placeholder=\"Cron Expression\"\n                                      onChange={handleChange}/>\n                    </Form.Group>\n\n                }\n\n                <Button variant=\"primary\" type=\"submit\">\n                    Submit\n                </Button>\n            </Form>\n        </Fragment>\n    );\n}\n\nexport default NotificationForm;","import React from \"react\";\nimport {Container} from \"react-bootstrap\";\nimport Header from \"./components/Header\";\nimport NotificationForm from \"./components/NotificationForm\";\nimport './App.css';\n\nfunction App() {\n    return (\n        <Container>\n            <Header/>\n            <NotificationForm />\n        </Container>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { positions, Provider } from \"react-alert\";\nimport AlertTemplate from \"react-alert-template-basic\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst options = {\n    timeout: 5000,\n    position: positions.BOTTOM_CENTER\n};\n\n\nconst Home = () => (\n    <Provider template={AlertTemplate} {...options}>\n        <App />\n    </Provider>\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}